;=====================================================================
; product specific variables NOTEPAD++
;
; J. Boettge <boettge@mpi-halle.mpg.de>  2021-12-09 07:26:41 +0100
;=====================================================================

include_insert "%ScriptPath%\variables.opsiinc"

Set $MAP$ 				= getProductMap
Set $FullProductId$   	= getValue("id", $MAP$)
Set $ProductName$     	= getValue("name", $MAP$)
Set $Version$         	= getValue("ProductVersion", $MAP$)
Set $ActionRequest$     = getValue("actionrequest", $MAP$)
Set $SystemType$      	= GetSystemType
Set $OS$                = GetOS
;Set $NTVersion$   		= GetMsVersionInfo
Set $LanguageMap$ 		= GetLocaleInfoMap
Set $System_Language$ 	= lower(getValue("system_default_language_id", $LanguageMap$))
Set $Stage$				= lower("{{STAGE}}")

requiredWinstVersion >= "4.11.6"

;-----------------------------------------------------------
;*** helper functions
;-----------------------------------------------------------
importlib "helpers.opsifunc"

;-----------------------------------------------------------
;*** basic requirements
;-----------------------------------------------------------
if not($OS$ = "Windows_NT")
       logError "Installation aborted: wrong OS  â€” This package only supports Windows"
       isFatalError
endif

Set $NTVersion$	= GetMsVersionInfo
if CompareDotSeparatedNumbers($NTVersion$, "<", "6.1")
	LogError "OS is not Windows 7 or above"
	isFatalError
endif

if not ($SystemType$ = "64 Bit System")
	; LogError "OS is not a 64 Bit System"
	; isFatalError

	LogWarning "OS is not a 64 Bit System; 32 Bit is not explicitly supported"
endif

;-----------------------------------------------------------
;*** get LogLevel from property
Set $LogLevelDefault$ = GetProductProperty("log_level","default")
;-----------------------------------------------------------
;*** detect testing package:
if (strPos($FullProductId$, "0_") = "0") and (strPos($FullProductId$, "test_") = "0") and (strPos($Stage$,"test") = "0")
	; not a testing package
	comment "INFO: RELEASE package detected"
	set $ProductId$  	= $FullProductId$ 
	set $Testing$ 		= "false"
	if ($LogLevelDefault$ = "default")
		set $LogLevelDefault$  	= "{{DEFAULT_RELEASE_LOGLEVEL}}"
	endif
else
	; this is a testing package
	comment "INFO: TESTING package detected"
	if (strPos($FullProductId$, "0_") = "0") and (strPos($FullProductId$, "test_") = "0")
		set $ProductId$	= $FullProductId$
	else
		set $ProductId$	= strPart($FullProductId$, calculate(strPos($FullProductId$,"_") + "+1"), strLength($FullProductId$))
	endif
	set $Testing$ 		= "true"
	if ($LogLevelDefault$ = "default")
		set $LogLevelDefault$  	= "{{DEFAULT_TESTING_LOGLEVEL}}"
	endif
endif
setlogLevel  = $LogLevelDefault$

;-----------------------------------------------------------
;*** detect O4I/DFN package:
;-----------------------------------------------------------
if (strPos($FullProductId$, "o4i_") = "0") AND (strPos($FullProductId$, "dfn_") = "0")
	set $isO4I$ = "false"
	set $StrippedProductId$ = $ProductId$
else
	set $isO4I$ = "true"
	set $StrippedProductId$ = strPart($ProductId$,"5",strLength($ProductId$))
endif

; required for full change from dfn_ to o4i_:
if (strPos($FullProductId$, "dfn_") = "0")
	set $isDFN$ = "false"
else
	set $isDFN$ = "true"
endif

;-----------------------------------------------------------
;*** Images
;-----------------------------------------------------------
if (FileExists("%ScriptPath%\..\lib\icons\%installingProdName%.png"))
	set $Img_Install$           = "%ScriptPath%\..\lib\icons\%installingProdName%.png"
	set $Img_Install_Custom$    = "%ScriptPath%\..\lib\icons\%installingProdName%.png"
	Set $Img_Uninstall$         = "%ScriptPath%\..\lib\icons\%installingProdName%.png"
	Set $Img_Uninstall_Custom$  = "%ScriptPath%\..\lib\icons\%installingProdName%.png"
	Set $Img_Prepare$           = "%ScriptPath%\..\lib\icons\%installingProdName%.png"
	Set $Img_Plugins$           = "%ScriptPath%\..\lib\icons\%installingProdName%.png"
	Set $Img_Config$            = "%ScriptPath%\..\lib\icons\%installingProdName%.png"
	Set $Img_Update$            = "%ScriptPath%\..\lib\icons\%installingProdName%.png"
	Set $Img_Defer$             = "%ScriptPath%\..\lib\icons\%installingProdName%.png"
else
	if ($isO4I$ = "true")
		set $Img_Install$		= "%ScriptPath%\images\" + $StrippedProductId$ + "_install_o4i.png"
	else
		set $Img_Install$		= "%ScriptPath%\images\" + $StrippedProductId$ + "_install.png"
	endif
	set $Img_Install_Custom$    = "%ScriptPath%\images\" + $StrippedProductId$ + "_install_custom.png"
	Set $Img_Uninstall$         = "%ScriptPath%\images\" + $StrippedProductId$ + "_uninstall.png"
	Set $Img_Uninstall_Custom$  = "%ScriptPath%\images\" + $StrippedProductId$ + "_uninstall_custom.png"
	Set $Img_Prepare$           = "%ScriptPath%\images\" + $StrippedProductId$ + "_prepare.png"
	Set $Img_Plugins$           = "%ScriptPath%\images\" + $StrippedProductId$ + "_plugins.png"
	Set $Img_Config$            = "%ScriptPath%\images\" + $StrippedProductId$ + "_config.png"
	Set $Img_Update$            = "%ScriptPath%\images\" + $StrippedProductId$ + "_update.png"
	Set $Img_Defer$             = "%ScriptPath%\images\" + $StrippedProductId$ + "_defer.png"
endif
	
comment "preparing..."
ShowBitmap $Img_Prepare$ $ProductName$

;-----------------------------------------------------------
;*** software architecture; valid values: "32 bit", "64 bit", "sysnative"
;-----------------------------------------------------------
; make the systemtype shorter:
if ($SystemType$ = "64 Bit System")
	set $SystemType$ ="x64"
else
	set $SystemType$ ="x32"
endif

Set $sw_arch$ = GetProductProperty("install_architecture","sysnative")
Set $sw_arch$ = takeString(0, splitString($sw_arch$, " "))
; Set $sw_arch$		  = "32"

if ( $sw_arch$ = "sysnative" )
	if ($SystemType$ = "x64")
		Set $sw_arch$ = "64"
	else
		Set $sw_arch$ = "32"
	endif
endif

if ($sw_arch$ = "64")
	; 64 bit software
	set $InstallBase$ = "%ProgramFiles64Dir%"
else
	; 32 bit software
	set $InstallBase$ = "%ProgramFiles32Dir%"
endif

if ($SystemType$="x86 System") and ($sw_arch$="64")
	LogError "Cannot install 64 bit version of " + $ProductName$ + " on a 32 bit operating system!"
	isFatalError
endif

;-----------------------------------------------------------
;*** property: language - "auto, ""de, "en"
;-----------------------------------------------------------
Set $sw_lang$ 				= GetProductProperty("language","auto")

;-----------------------------------------------------------
;*** property: updater - "yes", "no"
;-----------------------------------------------------------
Set $pr_Updater$ 			= GetProductProperty("updater","no")

;-----------------------------------------------------------
;*** property: keep_plugins - bool
;-----------------------------------------------------------
Set $pr_KeepPlugins$ 		= GetProductProperty("keep_plugins","True")

;-----------------------------------------------------------
;*** property: create desktop/startmenu/quickstart link?
;-----------------------------------------------------------
Set $pr_DesktopLink$        = GetProductProperty("desktop_link","False")

;-----------------------------------------------------------
;*** properties: post install/uninstall
;-----------------------------------------------------------
set $CustomPostInstall$     = getProductProperty("custom_post_install","none")
set $CustomPostUninstall$   = getProductProperty("custom_post_uninstall","none")

;-----------------------------------------------------------
;*** select PSDETAIL:
set $PSDETAIL$              = "%ScriptPath%\bin\psdetail.exe"
if (CompareDotSeparatedNumbers($NTVersion$, ">=", "10.0"))
	set $PSDETAIL$          = "%ScriptPath%\bin\psdetail4.exe"
endif

set $SEVENZIP$              = "%ScriptPath%\bin\7z.exe"

set $PSDETAIL$              = "%ScriptPath%\bin\psdetail.exe"
if (CompareDotSeparatedNumbers($NTVersion$, ">=", "10.0"))
	set $PSDETAIL$          = "%ScriptPath%\bin\psdetail4.exe"
endif

;-----------------------------------------------------------
;*** misc settings
;-----------------------------------------------------------
set $Kill_Running$          = GetProductProperty("kill_running", "False")

Set $RegPathUninstall64$    = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall"
Set $RegPathUninstall32$    = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall"


;-------------------------------------------------------
; filter for opsiServiceCall productOnClient_getObjects:
;-------------------------------------------------------
set $ProductFilter$	        = "*notepadpp"
set $ProductVersionFilter$  = "*"


;-----------------------------------------------------------
;*** specific settings
;-----------------------------------------------------------
Set $InstallerType$     = "NSIS"
;include_append "%ScriptPath%\exitcode_inno.opsiinc"
;include_append "%ScriptPath%\exitcode_msi.opsiinc"
include_append "%ScriptPath%\exitcode_nsis.opsiinc"

; packages (for example):
;    notepadpp-7.7-x32.exe
;    notepadpp-7.7-x64.exe

;Set $Installer$        = "%ScriptPath%\files\" + $StrippedProductId$ + "-{{O_SOFTWARE_VER}}-{{O_SOFTWARE_BUILD}}-" + $sw_arch$ + "bit"+ ".exe"
Set $Installer$	        = "%ScriptPath%\files\" + $StrippedProductId$ + "-{{O_SOFTWARE_VER}}-x" + $sw_arch$ + ".exe"
;Set $InstallDir$       = $InstallBase$ + "\" + stringReplace($ProductName$," ", "") + "\"
;Set $InstallDir$       = $InstallBase$ + "\" + $ProductName$ + "\"
Set $InstallDir$        = $InstallBase$ + "\" + $StrippedProductId$ + "\"
Set $LocaleDir$	        = $InstallDir$ + "localization\"
Set $PluginDir$	        = $InstallDir$ + "plugins\"
Set $MinimumSpace$      = "30 MB"
;Set $CheckBin$         = $StrippedProductId$ + ".exe"
Set $CheckBin$          = "notepad++.exe"
Set	$DefaultXML$        = $StrippedProductId$ + ".xml"
Set $PathToExe$         = $InstallDir$ + $CheckBin$
Set $TmpDir$            = "%opsiTmpDir%\" + $StrippedProductId$ + ".tmp\"
Set $LogDir$            = "%opsiLogDir%"
Set $Inst_Log$          = $LogDir$ + "\"+$ProductId$+"_install.log"
Set $Uninst_Log$        = $LogDir$ + "\"+$ProductId$+"_uninstall.log"

Set $PluginsExclude$    = createStringList("Config", "mimeTools", "NppConverter", "NppExport")
Set $plugin_count$      = "0"

;Set $SearchPattern$    = $ProductName$
;Set $Uninst_ID_std$    = $ProductName$
Set $SearchPattern$     = "Notepad++"
Set $Uninst_ID_std$     = "Notepad++"
Set $Uninst_Prg$        = "uninstall.exe"
Set $Uninstaller$       = $InstallDir$ + $Uninst_Prg$
; ...oder UninstallString aus Registry

;=== INNO ===
Set $INNO_Inst_Opts$    = '/SP- /SILENT /NOCANCEL /NORESTART /CLOSEAPPLICATIONS /SUPPRESSMSGBOXES /LANG=english /DIR="' + $InstallDir$ +'" /GROUP="' + $ProductName$ +'" /LOG="'+ $Inst_Log$ +'"'
Set $INNO_Uninst_Opts$  = '/SILENT /NORESTART /LOG="'+ $Uninst_Log$ +'"'

;=== MSI === (not used for installation here)
Set $MSI_Inst_Opts$     = '/qb-! /norestart /l+* "' + $Inst_Log$ +'" INSTALLDIR="' + $InstallDir$ + '" REBOOT=ReallySuppress ALLUSERS=1'
Set $MSI_Uninst_Opts$   = '/qb-! /norestart /l+* "' + $Uninst_Log$ + '" REBOOT=ReallySuppress'
Set $MSI_Inst_Cmd$      = 'msiexec /i "' + $Installer$ +'" ' + $Inst_Opts$
Set $MSI_Uninst_Cmd$    = "msiexec /x $ProductKey$ " + $Uninst_Opts$

;=== NSIS === (not used here)
Set $NSIS_Inst_Opts$    = "/S  /D=" + $InstallDir$
Set $NSIS_Uninst_Opts$  = "/S"
