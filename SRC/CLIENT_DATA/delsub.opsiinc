;=====================================================================
; delsub.opsiinc NOTEPAD++
; Uninstaller type: NSIS
;
; J. Boettge <boettge@mpi-halle.mpg.de>  2020-02-07 12:02:15 +0100
;=====================================================================


;=======================================
[sub_delsub_main]
;=======================================
Message "Removing previous version(s) of " + $ProductName$
ShowBitmap $Img_Prepare$ $ProductName$
marktime

if FileExists("%ScriptPath%\checkinstance.opsiinc")
	include_append "%ScriptPath%\checkinstance.opsiinc"
	sub_checkinstance_init
else
	isFatalError "File not found: checkinstance.opsiinc"
endif


;=== get list of UninstIDs from registry:
if FileExists("%ScriptPath%\uninst_section_search.opsiinc")
	;=== search in registry for available uninstall information
	include_append "%ScriptPath%\uninst_section_search.opsiinc"
	Sub_search_registry_uninstall_keys
else
	;=== fallback
	Set $ResultList$ = CreateStringList($Uninst_ID_std$ + "|x32")
endif

if not ( count ($ResultList$) = "0" )
	
	;=== process uninstall for all found uninstall sections:
	for %id% in $ResultList$ do sub_Uninstall_ID
	
	;=== custom post uninstall
	comment "include custom post uninstall file"
	if not ($CustomPostUninstall$ = "none")
		if FileExists("%ScriptPath%\custom\" + $CustomPostUninstall$)
			ShowBitmap $Img_Uninstall_Custom$ $ProductName$
			include_insert "%ScriptPath%\custom\" + $CustomPostUninstall$
			ShowBitmap $Img_Uninstall$ $ProductName$
		endif
	endif	
else
	comment "Empty result list while searching for " + $ProductName$ + " in registry - does not seem to be installed"
endif	

;=== update productOnClient information on depot server
Message "Updating status information on depot"
set $result$ = removeProductVerOnClientStatus($ProductFilter$, $ProductVersionFilter$)

;=== measure time
set $TimeDiff$ = getDiffTimeSec
Message  "Removal time: " + $TimeDiff$ + " seconds"	



;=======================================
[sub_Uninstall_ID]
;=======================================
set $Uninst_ID$    	= takeString(0, splitString("%id%", "|"))
set $Uninst_Arch$  	= takeString(1, splitString("%id%", "|"))

set $RegKey$		="[HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\" + $Uninst_ID$ + "]"

Switch $Uninst_Arch$
	Case "x32"
			set $DisplayName$    	= GetRegistryStringValue32($RegKey$ + " DisplayName")
			set $Inst_Loc$ 			= GetRegistryStringValue32($RegKey$ + " InstallLocation")
			set $Inst_Ver$ 			= GetRegistryStringValue32($RegKey$ + " DisplayVersion")
			set $UninstallString$  	= GetRegistryStringValue32($RegKey$ + " UninstallString")
			; maybe the previous setup was an Inno installer:
			set $RegInno$ 			= GetRegistryStringValue32($RegKey$ + " Inno Setup: Setup Version")
	EndCase
	Case "x64"
			set $DisplayName$    	= GetRegistryStringValue64($RegKey$ + " DisplayName")
			set $Inst_Loc$ 			= GetRegistryStringValue64($RegKey$ + " InstallLocation")
			set $Inst_Ver$ 			= GetRegistryStringValue64($RegKey$ + " DisplayVersion")
			set $UninstallString$   = GetRegistryStringValue64($RegKey$ + " UninstallString")
			; maybe the previous setup was an Inno installer:
			set $RegInno$ 			= GetRegistryStringValue64($RegKey$ + " Inno Setup: Setup Version")
	EndCase
	DefaultCase
			Comment "Invalid architecture for " + $Uninst_ID$ + " given: " + $Uninst_Arch$
	EndCase
EndSwitch


if ($UninstallString$ = "") 
	LogError "Missing UninstallString for [%id%] -- skipping"
else
	comment "Start uninstall sub section for " + $Inst_Ver$ + " (" + $Uninst_Arch$ + ")"
	
	if not ($RegInno$ = "")
			comment "Detected previous INNO setup " + $RegInno$
			set $isINNO$ = "1"
			set $Uninst_Opts$ = $INNO_Uninst_Opts$
			
			;=== uninstall (if uninstaller exists)
			if not ($UninstallString$ = "") and fileExists($UninstallString$)
				Sub_Uninstall
			else
				logError "Uninstaller does not exist!"
			endif			
	else
		set $isINNO$ = "0"
		if ( strpos(lower($UninstallString$),"msiexec") = "1" )
			set $isMSI$ = "1"
			comment "Detected previous MSI setup"
			set $Uninst_Opts$ = $MSI_Uninst_Opts$
			Sub_Uninstall
		else
			comment "Assuming NSIS setup"
			set $Uninst_Opts$ = $NSIS_Uninst_Opts$
			;=== uninstall (if uninstaller exists)
			if not ($UninstallString$ = "") and fileExists($UninstallString$)
				Sub_Uninstall
			else
				logError "Uninstaller does not exist!"
			endif			
		endif
	endif
endif


;======================================================================
[Sub_Uninstall]
;======================================================================
ShowBitmap $Img_Uninstall$ $ProductName$
Message "Uninstalling previous setup of " + $ProductName$ + " " + $Inst_Ver$

;=== get uninstall directory
sub_check_PathVar

;=== compare current InstallLocation with InstallDir from this package:
;if not ($Uninst_RegDir$ = lower($InstallDir$))
;	logWarning "Current installation is not at the expected location:"
;	comment "   Current InstallLocation: [" + $Uninst_RegDir$ + "]"
;	comment "   Expected Location:       [" + $InstallDir$ + "]"
;endif

;=== compare current Uninstaller with InstallDir from this package:
if not (lower($Uninstaller$) = lower(stringReplace($UninstallString$,'"','')))
	comment "INFO: Expected $UninstallString$ from registry does not match $Uninstaller$ from package:"
	comment "   [" + $UninstallString$ + "] <> [" + $Uninstaller$ + "]"
endif

;=== check for running binaries
;...the application:
set $CheckProcess$ = $Uninst_RegDir$ + $CheckBin$
;
; workaround for escape problem of the "+" character:
; note: this is less accurate!
set $CheckProcess$ = stringreplace($CheckProcess$, "+", "%")
set $Kill_Override$ = "false"
set $PSDETAIL_MODE$ = ""
sub_checkinstance

;=== save plugins for restore if requested
if ($ActionRequest$="setup") and ($pr_KeepPlugins$= "True")
	if FileExists($pluginDir$)
		Set $Plugins$ = shellCall('dir "' + $pluginDir$ + '" /b /a:d')
		; cleanup result list
		for %x% in $PluginsExclude$ do set $Plugins$ = removeFromListByMatch("%x%", $Plugins$)
		set $plugin_count$ = count($Plugins$)
		if ($plugin_count$ INT> "0")
			Message "Saving installed plugins..."
			if FileExists($TmpDir$)
				logWarning "Temp directory already exists. Cleaning up."
				files_deleteTemp
				if FileExists($TmpDir$)
					logWarning "Temp directory still exists!"
				endif
			endif
			; copy plugin subdirs
			for %x% in $Plugins$ do files_copyPlugin
		else
			Comment "Plugin directory contains only default plugins. Nothing to do."
		endif
	else
		logWarning "Plugin directory does not exist"
	endif
endif

;=== run uninstaller
LinkFolder_RemoveDesktopLink
if (FileExists("%CommonProgramsDir%\" + $ProductName$))
	LinkFolder_RemoveStartMenuLinks
endif
if ( not($isMSI$ = "1") and not(strpos($UninstallString$,'"')="1") and not(strpos($UninstallString$,' ')="0") )
	set $UninstallString$ = '"' + $UninstallString$ + '"'
endif

if ($isINNO$ = "1")
		Winbatch_Uninstall_inno
		sub_check_exitcode_inno
else
	if ($isMSI$ = "1")
		Winbatch_Uninstall_msi
		sub_check_exitcode_msi
	else
		Winbatch_Uninstall_nsis
		sub_check_exitcode_nsis
	endif
endif	

if ($ExitCode$ = "0") and not ($Uninst_RegDir$ = "")
	;=== does the installation directory still exist?
	if (FileExists($Uninst_RegDir$))
		comment "INFO: Install directory still exists: [" + $Uninst_RegDir$ + "]. Trying to delete."
		;=== try final cleanup
		Files_del_InstallDir
	endif
endif	


;======================================================================
[Winbatch_Uninstall_inno]
;======================================================================
; "$Uninstaller$" $Uninst_Opts$
$UninstallString$  $Uninst_Opts$

;======================================================================
[Winbatch_Uninstall_msi]
;======================================================================
; "$Uninstaller$" $Uninst_Opts$
$UninstallString$  $Uninst_Opts$

;======================================================================
[Winbatch_Uninstall_nsis]
;======================================================================
; "$Uninstaller$" $Uninst_Opts$
$UninstallString$  $Uninst_Opts$ _?=$Uninst_RegDir$

;======================================================================
[Files_del_InstallDir]
;======================================================================
delete -sfc "$Uninst_RegDir$"

;=====================================================================
[LinkFolder_RemoveDesktopLink]
;=====================================================================
set_basefolder common_desktopdirectory
set_subfolder ""
delete_element $ProductName$

;=====================================================================
[LinkFolder_RemoveStartMenuLinks]
;=====================================================================
set_basefolder common_programs
set_subfolder ""
delete_subfolder "$ProductName$"

;======================================================================
[sub_check_Exitcode]
;======================================================================
set $ExitCode$ = getLastExitCode
if not ($ExitCode$ = "0")
	logWarning "Last operation returned exitcode " + $ExitCode$
endif

;======================================================================
[sub_check_PathVar]
;======================================================================
if ($Inst_Loc$ = "")
	;===get install location from $UninstallString$
	set $Uninst_RegDir$ = lower(ExtractFilePath($UninstallString$))
else 
	set $Uninst_RegDir$ = stringReplace(lower($Inst_Loc$) + "\", "\\", "\")
endif

;======================================================================
[files_deleteTemp]
;======================================================================
del -sf "$TmpDir$"

;======================================================================
[files_copyPlugin]
;======================================================================
copy  -se "$pluginDir$%x%\" "$TmpDir$%x%"

